from conan import ConanFile
from conan.tools.cmake import CMakeToolchain, CMake, cmake_layout, CMakeDeps
from conan.tools.files import get
from conan.tools.scm import Git
import os

class Recipe(ConanFile):
    name = ""
    version = ""

    license = ""
    author = "Conzxy zengxiaoyu0@gmail.com"
    url = "https://github.com/Conzxy/"
    description = ""
    topics = ()

    # Binary configuration
    settings = "os", "compiler", "build_type", "arch"
    options = {
        "shared": [True, False],
        "fPIC": [True, False],
    }
    default_options = {
        "shared": False,
        "fPIC": True,
    }
    
    """
    To CMake, this is not necessary.
    """
    # Sources are located in the same place as this recipe, copy them to the recipe
    # exports_sources = "CMakeLists.txt", "src/*", "include/*"

    def source(self):
        git = Git(self)
        # target is the target directory to put contents
        git.clone(url=self.url, target='.')
        self.run('git submodule update --init --recursive')

    def config_options(self):
        if self.settings.os == "Windows":
            self.options.rm_safe("fPIC")

    def configure(self):
        if self.options.shared:
            self.options.rm_safe("fPIC")

    def layout(self):
        # reference:
        #  https://docs.conan.io/2/tutorial/developing_packages/package_layout.html#developing-packages-layout
            
        """
        For pacakge and ediable mode
        The directory contains root CMakeLists.txt
        Usually, this is the project root directory.
        """
        self.folders.source = '.'

        """
        Push build artifacts to build/Debug in Debug mode and 
        push them to build/Release in Release mode.

        Follow this convention, it can avoid clean build when switch between debug and release
        """
        self.folders.build = os.path.join("build", str(self.settings.build_type))

        # default
        self.folders.generators = os.path.join(self.folders.build, "generators")
        
        """
        Use the xxxConfig.cmake generated by CMakeLists.txt of project
        No need to set the package include and libdirs
        """

        """
        Equivalant to set the self.cpp_info.includedirs in package_info()
        Default is enough
        """
        # self.cpp.package.includedirs = ["include"] # includedirs is already set to 'include' by
        #                                            # default, but declared for completion

        """
        Equivalant to set the self.cpp_info.libdirs in package_info()
        Default is enough
        """
        # self.cpp.package.libdirs = ["lib"]         # libdirs is already set to 'lib' by

        
        """
        The source and build type is CppInfo like the self.cpp_info in package_info()

        Use the xxxConfig.cmake generated by CMakeLists.txt of project
        No need to set the editable include and libdirs
        """
        # self.cpp.source.includedirs = ['.']
        # self.cpp.build.libdirs = ['lib/release/debug']
        

        """
        Append `build/(Release|Debug)/` to `CMAKE_MODULE_PATH`.

        Equivalant to set the self.cpp_info.builddirs in package_info()
        but this is used for ediatble mode.
        """
        self.cpp.build.builddirs.append('.') # Relative to the self.folders.build

    def generate(self):
        deps = CMakeDeps(self)
        deps.generate()
        tc = CMakeToolchain(self)
      
        """
        You can set cmake variable in toolchain.
        e.g. tc.variables["xxx"] = self.options.xxxx
        """
        tc.generate()

    def build(self):
        cmake = CMake(self)
        cmake.configure(cli_args=["-GNinja"])
        cmake.build()

    def package(self):
        cmake = CMake(self)
        cmake.install()

    def package_info(self):
        """
        Relative path to the package folder
        e.g. relative to the ~/.conan2/p/xxxx12312123a4/p/
        """
        self.cpp_info.builddirs.append('lib/cmake/kanon')
        self.cpp_info.set_property("cmake_find_mode", "module")
